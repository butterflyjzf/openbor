From 1c9f53aa530aef80dfa80491c0747275cc7e3a1a Mon Sep 17 00:00:00 2001
From: Fabrice CARUSO <fabrice.caruso@free.fr>
Date: Sat, 9 May 2020 18:17:51 +0200
Subject: [PATCH] 002-fixkeys.patch

---
 engine/openbor.c      | 232 +++++++++++++++++++++++++++++++++++++++---
 engine/sdl/sdlport.c  |  22 +++-
 engine/source/utils.c |  17 +++-
 3 files changed, 251 insertions(+), 20 deletions(-)

diff --git a/engine/openbor.c b/engine/openbor.c
index 44eb88b9..133f1ed2 100644
--- a/engine/openbor.c
+++ b/engine/openbor.c
@@ -2542,7 +2542,7 @@ void clearsettings()
     savedata.logo = 0;
     savedata.uselog = 1;
     savedata.debuginfo = 0;
-    savedata.fullscreen = 0;
+    savedata.fullscreen = 1; // FCA : default to fullscreen
     savedata.vsync = 1;
 
 	#if WII
@@ -2584,6 +2584,8 @@ void clearsettings()
 
 void savesettings()
 {
+	saveasdefault(); return;  // FCA : disable per game settings
+
 #ifndef DC
     FILE *handle = NULL;
     char path[MAX_BUFFER_LEN] = {""};
@@ -2601,8 +2603,201 @@ void savesettings()
 #endif
 }
 
+
+#if SDL
+extern char savesDir[MAX_FILENAME_LEN];
+extern char screenShotsDir[MAX_FILENAME_LEN];
+#endif
+
+// FCA
+void saveToIni()
+{
+	FILE *handle = NULL;
+	char path[MAX_BUFFER_LEN] = { "" };
+
+#if !WIN
+	strcpy(path, "/userdata/system/configs/openbor/config.ini");
+	handle = fopen(path, "wb");
+#endif
+
+	if (handle == NULL)
+	{
+		strcat(path, "./config.ini");
+		handle = fopen(path, "wb");
+	}
+		
+	if (handle == NULL)
+		return;
+	
+	fprintf(handle, "gamma=%i\n", savedata.gamma);
+	fprintf(handle, "brightness=%i\n", savedata.brightness);
+	fprintf(handle, "soundvol=%i\n", savedata.soundvol);
+	fprintf(handle, "usemusic=%i\n", savedata.usemusic);
+	fprintf(handle, "musicvol=%i\n", savedata.musicvol);
+	fprintf(handle, "effectvol=%i\n", savedata.effectvol);
+	fprintf(handle, "usejoy=%i\n", savedata.usejoy);
+	fprintf(handle, "mode=%i\n", savedata.mode);
+	fprintf(handle, "windowpos=%i\n", savedata.windowpos);
+	fprintf(handle, "showtitles=%i\n", savedata.showtitles);
+	fprintf(handle, "videoNTSC=%i\n", savedata.videoNTSC);
+	fprintf(handle, "swfilter=%i\n", savedata.swfilter);
+	fprintf(handle, "logo=%i\n", savedata.logo);
+	fprintf(handle, "uselog=%i\n", savedata.uselog);
+	fprintf(handle, "debuginfo=%i\n", savedata.debuginfo);
+	fprintf(handle, "fullscreen=%i\n", savedata.fullscreen);
+	fprintf(handle, "stretch=%i\n", savedata.stretch);
+	fprintf(handle, "vsync=%i\n", savedata.vsync);
+#if SDL
+	fprintf(handle, "usegl=%i\n", savedata.usegl);
+	fprintf(handle, "hwscale=%f\n", savedata.hwscale);
+	fprintf(handle, "hwfilter=%i\n", savedata.hwfilter);
+
+#ifndef ANDROID
+	if (strcmp(savesDir, "Saves") != 0)
+		fprintf(handle, "savesDir=%s\n", savesDir);
+	
+	if (strcmp(screenShotsDir, "ScreenShots") != 0)
+		fprintf(handle, "screenShotsDir=%s\n", screenShotsDir);
+#endif
+
+#endif
+	
+	char tmp[255];
+	
+	for (int i = 0; i < MAX_PLAYERS; i++)
+	{
+		for (int j = 0; j < MAX_BTN_NUM; j++)
+		{
+			sprintf(tmp, "keys.%i.%i=%i\n", i, j, savedata.keys[i][j]);
+			fprintf(handle, tmp);
+		}
+	}
+
+	for (int i = 0; i < MAX_PLAYERS; i++)
+	{
+		sprintf(tmp, "joyrumble.%i=%i\n", i, savedata.joyrumble[i]);
+		fprintf(handle, tmp);
+	}
+
+	fclose(handle);
+}
+
+bool loadfromIni()
+{
+	FILE *handle = NULL;
+	char path[MAX_BUFFER_LEN] = { "" };
+
+#if !WIN
+	strcpy(path, "/userdata/system/configs/openbor/config.ini");
+	handle = fopen(path, "rb");
+#endif
+
+	if (handle == NULL)
+	{
+		strcat(path, "./config.ini");
+		handle = fopen(path, "rb");
+	}
+	
+	if (handle != NULL)
+	{
+		char line[1024] = "";
+		clearsettings();
+		
+		while (fgets(line, 1024, handle))
+		{
+			strtok(line, "\n");
+
+			char* pch = strstr(line, "=");
+			if (pch != NULL)
+			{
+				char key[1024] = "";
+				char value[1024] = "";
+
+				strncpy(key, line, pch - line);
+				strcpy(value, pch + 1);
+
+				if (strcmp(key, "gamma") == 0)
+					savedata.gamma = atoi(value);
+				if (strcmp(key, "brightness") == 0)
+					savedata.brightness = atoi(value);
+				if (strcmp(key, "soundvol") == 0)
+					savedata.soundvol = atoi(value);
+				if (strcmp(key, "usemusic") == 0)
+					savedata.usemusic = atoi(value);
+				if (strcmp(key, "musicvol") == 0)
+					savedata.musicvol = atoi(value);
+				if (strcmp(key, "effectvol") == 0)
+					savedata.effectvol = atoi(value);
+				if (strcmp(key, "usejoy") == 0)
+					savedata.usejoy = atoi(value);
+				if (strcmp(key, "mode") == 0)
+					savedata.mode = atoi(value);
+				if (strcmp(key, "windowpos") == 0)
+					savedata.windowpos = atoi(value);
+				if (strcmp(key, "showtitles") == 0)
+					savedata.showtitles = atoi(value);
+				if (strcmp(key, "videoNTSC") == 0)
+					savedata.videoNTSC = atoi(value);
+				if (strcmp(key, "swfilter") == 0)
+					savedata.swfilter = atoi(value);
+				if (strcmp(key, "logo") == 0)
+					savedata.logo = atoi(value);
+				if (strcmp(key, "uselog") == 0)
+					savedata.uselog = atoi(value);
+				if (strcmp(key, "debuginfo") == 0)
+					savedata.debuginfo = atoi(value);
+				if (strcmp(key, "debuginfo") == 0)
+					savedata.debuginfo = atoi(value);
+				if (strcmp(key, "fullscreen") == 0)
+					savedata.fullscreen = atoi(value);
+				if (strcmp(key, "stretch") == 0)
+					savedata.stretch = atoi(value);
+				if (strcmp(key, "vsync") == 0)
+					savedata.vsync = atoi(value);
+#if SDL
+				if (strcmp(key, "usegl") == 0)
+					savedata.usegl = atoi(value);
+				if (strcmp(key, "hwscale") == 0)
+					savedata.hwscale = atof(value);
+				if (strcmp(key, "hwfilter") == 0)
+					savedata.hwfilter = atoi(value);
+
+				if (strcmp(key, "savesDir") == 0)
+					strcpy(savesDir, value);
+				if (strcmp(key, "screenShotsDir") == 0)
+					strcpy(screenShotsDir, value);					
+#endif
+
+				char tmp[255];
+				for (int i = 0; i < MAX_PLAYERS; i++)
+				{
+					sprintf(tmp, "joyrumble.%i", i);
+					if (strcmp(key, tmp) == 0)
+						savedata.joyrumble[i] = atoi(value);
+
+					for (int j = 0; j < MAX_BTN_NUM; j++)
+					{
+						sprintf(tmp, "keys.%i.%i", i, j);
+						if (strcmp(key, tmp) == 0)
+							savedata.keys[i][j] = atoi(value);
+					}
+				}
+			}
+		}
+
+		fclose(handle);
+		return true;
+	}
+
+	return false;
+}
+//FCA 
+
+
 void saveasdefault()
 {
+	saveToIni(); return; // FCA
+
 #ifndef DC
     FILE *handle = NULL;
     char path[MAX_BUFFER_LEN] = {""};
@@ -2618,9 +2813,10 @@ void saveasdefault()
 #endif
 }
 
-
 void loadsettings()
 {
+	loadfromdefault(); return; // FCA : disable per game settings
+
 #ifndef DC
     FILE *handle = NULL;
     char path[MAX_BUFFER_LEN] = {""};
@@ -2652,6 +2848,8 @@ void loadsettings()
 
 void loadfromdefault()
 {
+	if (loadfromIni()) return; // FCA		
+
 #ifndef DC
     FILE *handle = NULL;
     char path[MAX_BUFFER_LEN] = {""};
@@ -2659,16 +2857,17 @@ void loadfromdefault()
     strcat(path, "default.cfg");
     clearsettings();
     handle = fopen(path, "rb");
-    if(handle == NULL)
-    {
-        return;
-    }
-    fread(&savedata, 1, sizeof(savedata), handle);
-    fclose(handle);
-    if(savedata.compatibleversion != COMPATIBLEVERSION)
-    {
-        clearsettings();
-    }
+	if (handle != NULL)
+	{
+		fread(&savedata, 1, sizeof(savedata), handle);
+		fclose(handle);
+	}
+
+	if (savedata.compatibleversion != COMPATIBLEVERSION)
+	{
+		clearsettings();
+	}
+	
 #else
     clearsettings();
 #endif
@@ -34544,6 +34743,8 @@ void inputrefresh(int playrecmode)
         bothnewkeys |= player[p].newkeys;
     }
 
+    if((bothkeys & (FLAG_START + FLAG_ESC)) == FLAG_START + FLAG_ESC) // FCA : hotkey/start exit
+      borShutdown(0, DEFAULT_SHUTDOWN_MESSAGE);
 }
 
 void execute_keyscripts()
@@ -35269,7 +35470,8 @@ void apply_controls()
 
     for(p = 0; p < MAX_PLAYERS; p++)
     {
-        control_setkey(playercontrolpointers[p], FLAG_ESC,        CONTROL_ESC);
+        //control_setkey(playercontrolpointers[p], FLAG_ESC,        CONTROL_ESC); // FCA
+		control_setkey(playercontrolpointers[p], FLAG_ESC,	      savedata.keys[p][SDID_ESC]); // FCA
         control_setkey(playercontrolpointers[p], FLAG_MOVEUP,     savedata.keys[p][SDID_MOVEUP]);
         control_setkey(playercontrolpointers[p], FLAG_MOVEDOWN,   savedata.keys[p][SDID_MOVEDOWN]);
         control_setkey(playercontrolpointers[p], FLAG_MOVELEFT,   savedata.keys[p][SDID_MOVELEFT]);
@@ -35419,7 +35621,7 @@ void borShutdown(int status, char *msg, ...)
 
     if(status != 2)
     {
-        display_credits();
+        // display_credits(); // FCA : fast shutdown
     }
 
     if(startup_done)
@@ -39801,7 +40003,7 @@ void openborMain(int argc, char **argv)
                 relback = 1;
                 started = 0;
             }
-
+					
             if(bothnewkeys & FLAG_ESC)
             {
                 quit = 1;
diff --git a/engine/sdl/sdlport.c b/engine/sdl/sdlport.c
index a820fefc..e313f06b 100644
--- a/engine/sdl/sdlport.c
+++ b/engine/sdl/sdlport.c
@@ -67,8 +67,18 @@ void borExit(int reset)
     exit(reset);
 }
 
+extern void loadsettings(); // FCA
+
 int main(int argc, char *argv[])
 {
+	// FCA : Set exe directory
+	char* dirsep = strrchr(argv[0], '\\');
+	if (dirsep == NULL) dirsep = strrchr(argv[0], '/');
+	if (dirsep != NULL) *dirsep = 0;
+	chdir(argv[0]);
+	loadsettings();
+	// FCA
+
 #ifndef SKIP_CODE
 	char pakname[MAX_FILENAME_LEN] = {""};
 #endif
@@ -106,6 +116,13 @@ int main(int argc, char *argv[])
 
 	packfile_mode(0);
 
+#if !WIN
+	// FCA
+	strcpy(savesDir, "/userdata/saves/openbor");
+	strcpy(logsDir, "/userdata/system/configs/openbor/Logs");
+	strcpy(screenShotsDir, "/userdata/screenshots");
+#endif
+
 #ifdef ANDROID
     if(strstr(SDL_AndroidGetExternalStoragePath(), "org.openbor.engine"))
     {
@@ -132,11 +149,14 @@ int main(int argc, char *argv[])
     chdir(rootDir);
 #endif
 
-	dirExists(paksDir, 1);
+	if (argc <= 1) // FCA
+		dirExists(paksDir, 1);
+
 	dirExists(savesDir, 1);
 	dirExists(logsDir, 1);
 	dirExists(screenShotsDir, 1);
 
+	if (argc > 1) strcpy(packfile, argv[1]); else // FCA : Command line
 	Menu();
 #ifndef SKIP_CODE
 	getPakName(pakname, -1);
diff --git a/engine/source/utils.c b/engine/source/utils.c
index 8a0dcfc7..f8fc940a 100644
--- a/engine/source/utils.c
+++ b/engine/source/utils.c
@@ -95,10 +95,10 @@ typedef void DIR;
 #define COPY_ROOT_PATH(buf, name) strncpy(buf, rootDir, strlen(rootDir)); strncat(buf, name, strlen(name)); strncat(buf, "/", 1);
 #define COPY_PAKS_PATH(buf, name) strncpy(buf, paksDir, strlen(paksDir)); strncat(buf, "/", 1); strncat(buf, name, strlen(name));
 #else
-#define CHECK_LOGFILE(type)  type ? fileExists("./Logs/OpenBorLog.txt") : fileExists("./Logs/ScriptLog.txt")
-#define OPEN_LOGFILE(type)   type ? fopen("./Logs/OpenBorLog.txt", "wt") : fopen("./Logs/ScriptLog.txt", "wt")
-#define APPEND_LOGFILE(type) type ? fopen("./Logs/OpenBorLog.txt", "at") : fopen("./Logs/ScriptLog.txt", "at")
-#define READ_LOGFILE(type)   type ? fopen("./Logs/OpenBorLog.txt", "rt") : fopen("./Logs/ScriptLog.txt", "rt")
+#define CHECK_LOGFILE(type)  type ? fileExists("/userdata/system/configs/openbor/Logs/OpenBorLog.txt") : fileExists("/userdata/system/configs/openbor/Logs/ScriptLog.txt")
+#define OPEN_LOGFILE(type)   type ? fopen("/userdata/system/configs/openbor/Logs/OpenBorLog.txt", "wt") : fopen("/userdata/system/configs/openbor/Logs/ScriptLog.txt", "wt")
+#define APPEND_LOGFILE(type) type ? fopen("/userdata/system/configs/openbor/Logs/OpenBorLog.txt", "at") : fopen("/userdata/system/configs/openbor/Logs/ScriptLog.txt", "at")
+#define READ_LOGFILE(type)   type ? fopen("/userdata/system/configs/openbor/Logs/OpenBorLog.txt", "rt") : fopen("/userdata/system/configs/openbor/Logs/ScriptLog.txt", "rt")
 #define COPY_ROOT_PATH(buf, name) strcpy(buf, "./"); strcat(buf, name); strcat(buf, "/");
 #define COPY_PAKS_PATH(buf, name) strcpy(buf, "./Paks/"); strcat(buf, name);
 #endif
@@ -154,6 +154,15 @@ u32 debug_time = 0;
 
 void getBasePath(char *newName, char *name, int type)
 {
+#if !WIN
+	// FCA
+	if (type == 0 && strcmp(name, "Saves") == 0)
+	{
+		strcpy(newName, "/userdata/saves/openbor/");
+		return;
+	}
+#endif
+
 #ifndef DC
     char buf[MAX_BUFFER_LEN] = {""};
     switch(type)
-- 
2.33.0.windows.2

From 34fdfad4dacdca7f81182c46fac839226be3744a Mon Sep 17 00:00:00 2001
From: Fabrice CARUSO <fabrice.caruso@free.fr>
Date: Sat, 9 May 2020 18:25:36 +0200
Subject: [PATCH] axismanagement

axismanagement fix
---
 engine/openbor.c         | 20 +++++++++++++++-----
 engine/openbor.h         | 27 ++++++++++++++++++++-------
 engine/source/savedata.h |  2 +-
 3 files changed, 36 insertions(+), 13 deletions(-)

diff --git a/engine/openbor.c b/engine/openbor.c
index 133f1ed2..fde1b1af 100644
--- a/engine/openbor.c
+++ b/engine/openbor.c
@@ -2420,6 +2420,7 @@ void execute_pdie_script(int index)
 void clearbuttons(int player)
 {
     savedata.joyrumble[player] = 0;
+	savedata.keys[player][SDID_AXISUP] = savedata.keys[player][SDID_AXISDOWN] = savedata.keys[player][SDID_AXISLEFT] = savedata.keys[player][SDID_AXISRIGHT] = 0; // FCANEW
 
     if (player == 0)
     {
@@ -35472,10 +35473,10 @@ void apply_controls()
     {
         //control_setkey(playercontrolpointers[p], FLAG_ESC,        CONTROL_ESC); // FCA
 		control_setkey(playercontrolpointers[p], FLAG_ESC,	      savedata.keys[p][SDID_ESC]); // FCA
-        control_setkey(playercontrolpointers[p], FLAG_MOVEUP,     savedata.keys[p][SDID_MOVEUP]);
-        control_setkey(playercontrolpointers[p], FLAG_MOVEDOWN,   savedata.keys[p][SDID_MOVEDOWN]);
-        control_setkey(playercontrolpointers[p], FLAG_MOVELEFT,   savedata.keys[p][SDID_MOVELEFT]);
-        control_setkey(playercontrolpointers[p], FLAG_MOVERIGHT,  savedata.keys[p][SDID_MOVERIGHT]);
+        control_setkey(playercontrolpointers[p], FLAG_PADUP,     savedata.keys[p][SDID_MOVEUP]); // FCANEW
+        control_setkey(playercontrolpointers[p], FLAG_PADDOWN,   savedata.keys[p][SDID_MOVEDOWN]); // FCANEW
+        control_setkey(playercontrolpointers[p], FLAG_PADLEFT,   savedata.keys[p][SDID_MOVELEFT]); // FCANEW
+        control_setkey(playercontrolpointers[p], FLAG_PADRIGHT,  savedata.keys[p][SDID_MOVERIGHT]); // FCANEW
         control_setkey(playercontrolpointers[p], FLAG_ATTACK,     savedata.keys[p][SDID_ATTACK]);
         control_setkey(playercontrolpointers[p], FLAG_ATTACK2,    savedata.keys[p][SDID_ATTACK2]);
         control_setkey(playercontrolpointers[p], FLAG_ATTACK3,    savedata.keys[p][SDID_ATTACK3]);
@@ -35484,6 +35485,10 @@ void apply_controls()
         control_setkey(playercontrolpointers[p], FLAG_SPECIAL,    savedata.keys[p][SDID_SPECIAL]);
         control_setkey(playercontrolpointers[p], FLAG_START,      savedata.keys[p][SDID_START]);
         control_setkey(playercontrolpointers[p], FLAG_SCREENSHOT, savedata.keys[p][SDID_SCREENSHOT]);
+		control_setkey(playercontrolpointers[p], FLAG_AXISUP, savedata.keys[p][SDID_AXISUP]); // FCANEW
+		control_setkey(playercontrolpointers[p], FLAG_AXISDOWN, savedata.keys[p][SDID_AXISDOWN]); // FCANEW
+		control_setkey(playercontrolpointers[p], FLAG_AXISLEFT, savedata.keys[p][SDID_AXISLEFT]); // FCANEW
+		control_setkey(playercontrolpointers[p], FLAG_AXISRIGHT, savedata.keys[p][SDID_AXISRIGHT]); // FCANEW
     }
 }
 
@@ -38331,7 +38336,7 @@ void keyboard_setup(int player)
         selector = 0,
         setting = -1,
         i, k, ok = 0,
-              disabledkey[MAX_BTN_NUM] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
+              disabledkey[MAX_BTN_NUM] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0 }, // FCANEW {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
                                 col1 = -8, col2 = 6;
     ptrdiff_t voffset, pos;
     char *buf,
@@ -38362,6 +38367,11 @@ void keyboard_setup(int player)
     strcpy(buttonnames[SDID_START], "Start");
     strcpy(buttonnames[SDID_SCREENSHOT], "Screenshot");
     strcpy(buttonnames[SDID_ESC], "Exit");
+	
+	strcpy(buttonnames[SDID_AXISUP], "Axis Up"); // FCANEW
+	strcpy(buttonnames[SDID_AXISDOWN], "Axis Down"); // FCANEW
+	strcpy(buttonnames[SDID_AXISLEFT], "Axis Left"); // FCANEW
+	strcpy(buttonnames[SDID_AXISRIGHT], "Axis Right"); // FCANEW
 
     savesettings();
     bothnewkeys = 0;
diff --git a/engine/openbor.h b/engine/openbor.h
index 70daface..d5bd5d3e 100644
--- a/engine/openbor.h
+++ b/engine/openbor.h
@@ -418,10 +418,10 @@ typedef enum
 {
     FLAG_ESC			= (1 << 0),
     FLAG_START			= (1 << 1),
-    FLAG_MOVELEFT		= (1 << 2),
-    FLAG_MOVERIGHT		= (1 << 3),
-    FLAG_MOVEUP		    = (1 << 4),
-    FLAG_MOVEDOWN		= (1 << 5),
+    FLAG_PADLEFT		= (1 << 2), // FCANEW
+    FLAG_PADRIGHT		= (1 << 3), // FCANEW
+    FLAG_PADUP		    = (1 << 4), // FCANEW
+    FLAG_PADDOWN		= (1 << 5), // FCANEW
     FLAG_ATTACK		    = (1 << 6),
     FLAG_JUMP			= (1 << 7),
     FLAG_SPECIAL		= (1 << 8),
@@ -430,9 +430,18 @@ typedef enum
     FLAG_ATTACK3		= (1 << 11),
     FLAG_ATTACK4		= (1 << 12),
     FLAG_ANYBUTTON		= (FLAG_START|FLAG_SPECIAL|FLAG_ATTACK|FLAG_ATTACK2|FLAG_ATTACK3|FLAG_ATTACK4|FLAG_JUMP),
-    FLAG_CONTROLKEYS    = (FLAG_SPECIAL|FLAG_ATTACK|FLAG_ATTACK2|FLAG_ATTACK3|FLAG_ATTACK4|FLAG_JUMP|FLAG_MOVEUP|FLAG_MOVEDOWN|FLAG_MOVELEFT|FLAG_MOVERIGHT),
+    FLAG_CONTROLKEYS    = (FLAG_SPECIAL|FLAG_ATTACK|FLAG_ATTACK2|FLAG_ATTACK3|FLAG_ATTACK4|FLAG_JUMP|FLAG_PADUP|FLAG_PADDOWN|FLAG_PADLEFT|FLAG_PADRIGHT), // FCANEW
     FLAG_FORWARD		= (1 << 13),
-    FLAG_BACKWARD		= (1 << 14)
+    FLAG_BACKWARD		= (1 << 14),
+
+	FLAG_AXISLEFT		= (1 << 15), // FCANEW
+	FLAG_AXISRIGHT		= (1 << 16), // FCANEW
+	FLAG_AXISUP			= (1 << 17), // FCANEW
+	FLAG_AXISDOWN		= (1 << 18), // FCANEW
+	FLAG_MOVEDOWN = FLAG_PADDOWN | FLAG_AXISDOWN, // FCANEW
+	FLAG_MOVEUP = FLAG_PADUP | FLAG_AXISUP, // FCANEW
+	FLAG_MOVELEFT = FLAG_PADLEFT | FLAG_AXISLEFT, // FCANEW
+	FLAG_MOVERIGHT = FLAG_PADRIGHT | FLAG_AXISRIGHT, // FCANEW
 } e_key_def;
 
 typedef enum
@@ -455,7 +464,11 @@ typedef enum
     SDID_SPECIAL,
     SDID_START,
     SDID_SCREENSHOT,
-    SDID_ESC
+    SDID_ESC,
+	SDID_AXISUP, // FCANEW 
+	SDID_AXISDOWN,
+	SDID_AXISLEFT,
+	SDID_AXISRIGHT
 } e_key_id;
 
 // Caskey, Damon V.
diff --git a/engine/source/savedata.h b/engine/source/savedata.h
index 9700f320..a3eee39f 100644
--- a/engine/source/savedata.h
+++ b/engine/source/savedata.h
@@ -10,7 +10,7 @@
 #define SAVEDATA_H
 
 #define     MAX_PLAYERS         4
-#define     MAX_BTN_NUM         13
+#define     MAX_BTN_NUM         17 // FCANEW // 13
 
 typedef struct
 {
-- 
2.33.0.windows.2

From 449929a6928dbf6a4de6c35c80204a746b08d49e Mon Sep 17 00:00:00 2001
From: Fabrice CARUSO <fabrice.caruso@free.fr>
Date: Mon, 5 Oct 2020 09:50:59 +0200
Subject: [PATCH] Fix pad/axis combos (player running)

---
 engine/openbor.c | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/engine/openbor.c b/engine/openbor.c
index fde1b1af..46905d06 100644
--- a/engine/openbor.c
+++ b/engine/openbor.c
@@ -31410,7 +31410,8 @@ int match_combo(int a[], s_player *p, int l)
         step = (step + MAX_SPECIAL_INPUTS) % MAX_SPECIAL_INPUTS;
 
         // old: !(a[l - 1 - j]&p->combokey[step])
-        if( ((a[l - 1 - j]&p->combokey[step]) ^ a[l - 1 - j]) ) // if input&combokey == 0 then not good btn
+        //if( ((a[l - 1 - j]&p->combokey[step]) ^ a[l - 1 - j]) ) // if input&combokey == 0 then not good btn
+		if ((a[l - 1 - j] & p->combokey[step]) == 0)
         {
             return 0;
         }
-- 
2.33.0.windows.2

From 2153153546bb3315d01200519afec66038e1e12f Mon Sep 17 00:00:00 2001
From: Fabrice CARUSO <fabrice.caruso@free.fr>
Date: Sat, 17 Jun 2023 16:33:44 +0200
Subject: [PATCH] [SDL2] Changes to build using external SDL2.dll

---
 engine/Makefile             |  2 +-
 engine/build.bat            |  4 +--
 engine/build.sh             |  4 +--
 engine/openbor.c            | 64 ++++++++++++++++++-------------------
 engine/resources/OpenBOR.rc |  2 +-
 engine/sdl/control.c        | 23 ++++++-------
 6 files changed, 50 insertions(+), 49 deletions(-)

diff --git a/engine/Makefile b/engine/Makefile
index 8b0f9a65..6dbb278f 100644
--- a/engine/Makefile
+++ b/engine/Makefile
@@ -45,7 +45,7 @@ TARGET_RESOURCE = resources/$(VERSION_NAME).res
 OBJTYPE         = win32
 BUILD_SDL       = 1
 BUILD_GFX       = 1
-BUILD_STATIC    = 1
+# BUILD_STATIC    = 1
 BUILD_SDL_IO    = 1
 BUILD_OPENGL    = 1
 BUILD_LOADGL    = 1
diff --git a/engine/build.bat b/engine/build.bat
index e5bf49f0..62a85b23 100644
--- a/engine/build.bat
+++ b/engine/build.bat
@@ -14,7 +14,7 @@
 set BUILDBATCH=1
 set TOOLS=../tools/bin;../tools/7-Zip;../tools/svn/bin;../tools/mingit/mingw32/bin;
 set PATH=%TOOLS%
-bash.exe build.sh all
+bash.exe build.sh 5
 @endlocal
 
 @rem ----------------------- Batch CMD Line Scripts ------------------------
@@ -31,5 +31,5 @@ bash.exe version.sh 1
 :missing
 @endlocal
 
-pause
+REM pause
 
diff --git a/engine/build.sh b/engine/build.sh
index 4c35acdb..f5d46145 100755
--- a/engine/build.sh
+++ b/engine/build.sh
@@ -18,8 +18,8 @@ export MAKEFLAGS=-j4
 
 # Display Version
 function version {
-  . ./version.sh
-  make version
+  # . ./version.sh
+  # make version
   mkdir -p releases
   cp README ./releases/README.txt
   cp LICENSE ./releases/LICENSE.txt
diff --git a/engine/openbor.c b/engine/openbor.c
index 46905d06..71861ba3 100644
--- a/engine/openbor.c
+++ b/engine/openbor.c
@@ -37783,7 +37783,7 @@ int load_saved_game()
         if(saveslot >= num_difficulties) // not found
         {
             _menutextm(2, -4, 0, Tr("Load Game"));
-            _menutext(0, col1, -2, Tr("Saved File:"));
+            _menutext(0, col1, -2, Tr("Saved File"));
             _menutext(0, col2, -2, Tr("Not Found!"));
             _menutextm(1, 6, 0, Tr("Back"));
 
@@ -37792,7 +37792,7 @@ int load_saved_game()
         else
         {
             _menutextm(2, -4, 0, Tr("Load Game"));
-            _menutext(0, col1, -2, Tr("Saved File:"));
+            _menutext(0, col1, -2, Tr("Saved File"));
             if(savedStatus)
             {
                 _menutext(0, col2, -2, "%s", name);
@@ -38420,8 +38420,8 @@ void keyboard_setup(int player)
 
     while(!quit)
     {
-        voffset = -6;
-        _menutextm(2, -8, 0, Tr("Player %i"), player + 1);
+        voffset = -9;
+        _menutextm(2, -11, 0, Tr("Player %i"), player + 1);
         for(i = 0; i < btnnum; i++)
         {
             if(!disabledkey[i])
@@ -38432,7 +38432,7 @@ void keyboard_setup(int player)
             }
         }
         #if SDL || WII || DC
-        ++voffset;
+        // ++voffset;
         if(savedata.joyrumble[player])
         {
             _menutext((selector == OPTIONS_NUM - 3), col1, voffset++, Tr("Rumble Enabled"));
@@ -38723,15 +38723,15 @@ void menu_options_sound()
     while(!quit)
     {
         _menutextm(2, -5, 0, Tr("Sound Options"));
-        _menutext((selector == 0), col1, -2, Tr("Sound Volume:"));
+        _menutext((selector == 0), col1, -2, Tr("Sound Volume"));
         _menutext((selector == 0), col2, -2, "%i", savedata.soundvol);
-        _menutext((selector == 1), col1, -1, Tr("SFX Volume:"));
+        _menutext((selector == 1), col1, -1, Tr("SFX Volume"));
         _menutext((selector == 1), col2, -1, "%i", savedata.effectvol);
-        _menutext((selector == 2), col1, 0, Tr("Music Volume:"));
+        _menutext((selector == 2), col1, 0, Tr("Music Volume"));
         _menutext((selector == 2), col2, 0, "%i", savedata.musicvol);
-        _menutext((selector == 3), col1, 1, Tr("BGM:"));
+        _menutext((selector == 3), col1, 1, Tr("BGM"));
         _menutext((selector == 3), col2, 1, (savedata.usemusic ? Tr("Enabled") : Tr("Disabled")));
-        _menutext((selector == 4), col1, 2, Tr("Show Titles:"));
+        _menutext((selector == 4), col1, 2, Tr("Show Titles"));
         _menutext((selector == 4), col2, 2, (savedata.showtitles ? Tr("Yes") : Tr("No")));
         _menutextm((selector == 5), 5, 0, Tr("Back"));
 
@@ -39033,23 +39033,23 @@ void menu_options_debug()
         // Reset menu item position Y.
         pos_y = MENU_POS_Y + MENU_ITEMS_MARGIN_Y;
 
-        _menutext((selector == ITEM_PERFORMANCE),    COLUMN_1_POS_X, pos_y, Tr("Performance:"));
+        _menutext((selector == ITEM_PERFORMANCE),    COLUMN_1_POS_X, pos_y, Tr("Performance"));
         _menutext((selector == ITEM_PERFORMANCE),    COLUMN_2_POS_X, pos_y, (savedata.debuginfo & DEBUG_DISPLAY_PERFORMANCE ? Tr("Enabled") : Tr("Disabled")));
         pos_y++;
 
-        _menutext((selector == ITEM_POSITION),       COLUMN_1_POS_X, pos_y, Tr("Basic Properties:"));
+        _menutext((selector == ITEM_POSITION),       COLUMN_1_POS_X, pos_y, Tr("Basic Properties"));
         _menutext((selector == ITEM_POSITION),       COLUMN_2_POS_X, pos_y, (savedata.debuginfo & DEBUG_DISPLAY_PROPERTIES ? Tr("Enabled") : Tr("Disabled")));
         pos_y++;
 
-        _menutext((selector == ITEM_COL_ATTACK),     COLUMN_1_POS_X, pos_y, Tr("Collision Attack:"));
+        _menutext((selector == ITEM_COL_ATTACK),     COLUMN_1_POS_X, pos_y, Tr("Collision Attack"));
         _menutext((selector == ITEM_COL_ATTACK),     COLUMN_2_POS_X, pos_y, (savedata.debuginfo & DEBUG_DISPLAY_COLLISION_ATTACK ? Tr("Enabled") : Tr("Disabled")));
         pos_y++;
 
-        _menutext((selector == ITEM_COL_BODY),       COLUMN_1_POS_X, pos_y, Tr("Collision Body:"));
+        _menutext((selector == ITEM_COL_BODY),       COLUMN_1_POS_X, pos_y, Tr("Collision Body"));
         _menutext((selector == ITEM_COL_BODY),       COLUMN_2_POS_X, pos_y, (savedata.debuginfo & DEBUG_DISPLAY_COLLISION_BODY ? Tr("Enabled") : Tr("Disabled")));
         pos_y++;
 
-        _menutext((selector == ITEM_COL_RANGE),      COLUMN_1_POS_X, pos_y, Tr("Range:"));
+        _menutext((selector == ITEM_COL_RANGE),      COLUMN_1_POS_X, pos_y, Tr("Range"));
         _menutext((selector == ITEM_COL_RANGE),      COLUMN_2_POS_X, pos_y, (savedata.debuginfo & DEBUG_DISPLAY_RANGE ? Tr("Enabled") : Tr("Disabled")));
         pos_y++;
 
@@ -39186,19 +39186,19 @@ void menu_options_system()
     {
         _menutextm(2, SYS_OPT_Y_POS-2, 0, Tr("System Options"));
 
-        _menutext(0, col1, SYS_OPT_Y_POS, Tr("Total RAM:"));
+        _menutext(0, col1, SYS_OPT_Y_POS, Tr("Total RAM"));
         _menutext(0, col2, SYS_OPT_Y_POS, Tr("%s KB"), commaprint(getSystemRam(KBYTES)));
 
-        _menutext(0, col1, SYS_OPT_Y_POS+1, Tr("Used RAM:"));
+        _menutext(0, col1, SYS_OPT_Y_POS+1, Tr("Used RAM"));
         _menutext(0, col2, SYS_OPT_Y_POS+1, Tr("%s KB"), commaprint(getUsedRam(KBYTES)));
 
-        _menutext(0, col1, SYS_OPT_Y_POS+2, Tr("Max Players:"));
+        _menutext(0, col1, SYS_OPT_Y_POS+2, Tr("Max Players"));
         _menutext(0, col2, SYS_OPT_Y_POS+2, Tr("%i"), levelsets[current_set].maxplayers);
 
-        _menutext((selector == SYS_OPT_LOG), col1, SYS_OPT_Y_POS+4, Tr("File Logging:"));
+        _menutext((selector == SYS_OPT_LOG), col1, SYS_OPT_Y_POS+4, Tr("File Logging"));
         _menutext((selector == SYS_OPT_LOG), col2, SYS_OPT_Y_POS+4, (savedata.uselog ? Tr("Enabled") : Tr("Disabled")));
 
-        _menutext((selector == SYS_OPT_VSDAMAGE), col1, SYS_OPT_Y_POS+5, Tr("Versus Damage:"), 0);
+        _menutext((selector == SYS_OPT_VSDAMAGE), col1, SYS_OPT_Y_POS+5, Tr("Versus Damage"), 0);
         if(versusdamage == 0)
         {
             _menutext((selector == SYS_OPT_VSDAMAGE), col2, SYS_OPT_Y_POS+5, Tr("Disabled by Module"));
@@ -39219,7 +39219,7 @@ void menu_options_system()
             }
         }
 
-        _menutext((selector == SYS_OPT_CHEATS), col1, SYS_OPT_Y_POS+6, Tr("Cheats:"));
+        _menutext((selector == SYS_OPT_CHEATS), col1, SYS_OPT_Y_POS+6, Tr("Cheats"));
         _menutext((selector == SYS_OPT_CHEATS), col2, SYS_OPT_Y_POS+6, forcecheatsoff ? Tr("Disabled by Module") : (cheats ? Tr("On") : Tr("Off")));
         if(!nodebugoptions) _menutext((selector == SYS_OPT_DEBUG), col1, SYS_OPT_Y_POS+7, Tr("Debug Settings..."));
 
@@ -39373,15 +39373,15 @@ void menu_options_video()
     while(!quit)
     {
         _menutextm(2, -5, 0, Tr("Video Options"));
-        _menutext((selector == 0), col1, -3, Tr("Brightness:"));
+        _menutext((selector == 0), col1, -3, Tr("Brightness"));
         _menutext((selector == 0), col2, -3, "%i", savedata.brightness);
-        _menutext((selector == 1), col1, -2, Tr("Gamma:"));
+        _menutext((selector == 1), col1, -2, Tr("Gamma"));
         _menutext((selector == 1), col2, -2, "%i", savedata.gamma);
-        _menutext((selector == 2), col1, -1, Tr("Window Offset:"));
+        _menutext((selector == 2), col1, -1, Tr("Window Offset"));
         _menutext((selector == 2), col2, -1, "%i", savedata.windowpos);
 
 #if OPENDINGUX
-        _menutext((selector == 3), col1, 0, Tr("Display Mode:"));
+        _menutext((selector == 3), col1, 0, Tr("Display Mode"));
         _menutext((selector == 3), col2, 0, savedata.fullscreen ? Tr("Full") : Tr("Window"));
         _menutextm((selector == 4), 6, 0, Tr("Back"));
         if(selector < 0)
@@ -39422,13 +39422,13 @@ void menu_options_video()
 
 #if SDL
 #if !defined(GP2X) && !defined(OPENDINGUX)
-        _menutext((selector == 3), col1, 0, Tr("Display Mode:"));
+        _menutext((selector == 3), col1, 0, Tr("Display Mode"));
         _menutext((selector == 3), col2, 0, savedata.fullscreen ? Tr("Full") : Tr("Window"));
 
-        _menutext((selector == 4), col1, 1, Tr("Video Backend:"));
+        _menutext((selector == 4), col1, 1, Tr("Video Backend"));
         _menutext((selector == 4), col2, 1, (opengl ? Tr("OpenGL") : Tr("SDL")));
 
-        _menutext((selector == 5), col1, 2, Tr("Scale:"));
+        _menutext((selector == 5), col1, 2, Tr("Scale"));
 #ifdef ANDROID
         if(savedata.hwscale == 0)
 #else
@@ -39442,7 +39442,7 @@ void menu_options_video()
             _menutext((selector == 5), col2, 2, "%4.2fx - %ix%i", savedata.hwscale, (int)(videomodes.hRes * savedata.hwscale), (int)(videomodes.vRes * savedata.hwscale));
         }
 
-        _menutext((selector == 6), col1, 3, Tr("Hardware Filter:"));
+        _menutext((selector == 6), col1, 3, Tr("Hardware Filter"));
         {
             char *filterName;
             if (savedata.hwscale == 1.0 && !savedata.fullscreen)
@@ -39456,15 +39456,15 @@ void menu_options_video()
             _menutext((selector == 6), col2, 3, Tr(filterName));
         }
 
-        _menutext((selector == 7), col1, 4, Tr("Software Filter:"));
+        _menutext((selector == 7), col1, 4, Tr("Software Filter"));
         _menutext((selector == 7), col2, 4, ((savedata.hwscale >= 2.0 || savedata.fullscreen) ? Tr(GfxBlitterNames[savedata.swfilter]) : Tr("Disabled")));
 
-        _menutext((selector == 8), col1, 5, Tr("VSync:"));
+        _menutext((selector == 8), col1, 5, Tr("VSync"));
         _menutext((selector == 8), col2, 5, savedata.vsync ? "Enabled" : "Disabled");
 
         if(savedata.fullscreen)
         {
-            _menutext((selector == 9), col1, 6, Tr("Fullscreen Type:"));
+            _menutext((selector == 9), col1, 6, Tr("Fullscreen Type"));
             _menutext((selector == 9), col2, 6, (savedata.stretch ? Tr("Stretch to Screen") : Tr("Preserve Aspect Ratio")));
         }
         else if(selector == 9)
diff --git a/engine/resources/OpenBOR.rc b/engine/resources/OpenBOR.rc
index 856fac40..a0d74478 100644
--- a/engine/resources/OpenBOR.rc
+++ b/engine/resources/OpenBOR.rc
@@ -4,7 +4,7 @@
 A ICON "A.ico"
 
 1 VERSIONINFO
-FILEVERSION     3,0,VERSION_BUILD_INT,0
+FILEVERSION     3,0,VERSION_BUILD_INT,5242
 BEGIN
   BLOCK "StringFileInfo"
   BEGIN
diff --git a/engine/sdl/control.c b/engine/sdl/control.c
index 9e353bc7..aa0272e6 100644
--- a/engine/sdl/control.c
+++ b/engine/sdl/control.c
@@ -292,13 +292,13 @@ void getPads(Uint8* keystate, Uint8* keystate_def)
 			if (joystick[i] == NULL) continue;
 
 			// check buttons
-			for(j = 0; j < joysticks[i].NumButtons; j++)
+			for(j = 0; j < SDL_JoystickNumButtons(joystick[i]); j++)
             {
                 joysticks[i].Buttons |= SDL_JoystickGetButton(joystick[i], j) << j;
             }
 
 			// check axes
-			for(j = 0; j < joysticks[i].NumAxes; j++)
+			for(j = 0; j < SDL_JoystickNumAxes(joystick[i]); j++)
 			{
 				axis = SDL_JoystickGetAxis(joystick[i], j);
 				if(axis < -1*T_AXIS)  { joysticks[i].Axes |= 0x01 << (j*2); }
@@ -306,10 +306,8 @@ void getPads(Uint8* keystate, Uint8* keystate_def)
 			}
 
 			// check hats
-			for(j = 0; j < joysticks[i].NumHats; j++)
+			for(j = 0; j < SDL_JoystickNumHats(joystick[i]); j++)
             {
-                //joysticks[i].Hats |= SDL_JoystickGetHat(joystick[i], j) << (j*4);
-
                 Uint8 hat_value = SDL_JoystickGetHat(joystick[i], j);
                 if(hat_value & SDL_HAT_UP)      joysticks[i].Hats |= SDL_HAT_UP     << (j*4);
                 if(hat_value & SDL_HAT_RIGHT)   joysticks[i].Hats |= SDL_HAT_RIGHT  << (j*4);
@@ -318,9 +316,10 @@ void getPads(Uint8* keystate, Uint8* keystate_def)
             }
 
 			// combine axis, hat, and button state into a single value
-			joysticks[i].Data = joysticks[i].Buttons;
-			joysticks[i].Data |= joysticks[i].Axes << joysticks[i].NumButtons;
-			joysticks[i].Data |= joysticks[i].Hats << (joysticks[i].NumButtons + 2*joysticks[i].NumAxes);
+
+			joysticks[i].Data = (u64) joysticks[i].Buttons;
+			joysticks[i].Data |= (u64) joysticks[i].Axes << (u64) joysticks[i].NumButtons;
+			joysticks[i].Data |= (u64) joysticks[i].Hats << (u64) (joysticks[i].NumButtons + 2*joysticks[i].NumAxes);
 		}
 	}
 
@@ -412,9 +411,11 @@ void open_joystick(int i)
        printf("\nWarning: Unable to initialize joystick in port: %d! SDL Error: %s\n", i, SDL_GetError());
        return;
     }
-    joysticks[i].NumHats = SDL_JoystickNumHats(joystick[i]);
-    joysticks[i].NumAxes = SDL_JoystickNumAxes(joystick[i]);
-    joysticks[i].NumButtons = SDL_JoystickNumButtons(joystick[i]);
+
+	// FCA : hardcode NumButtons, NumAxes & NumHats for injection
+	joysticks[i].NumHats = 4;     // SDL_JoystickNumHats(joystick[i]);
+	joysticks[i].NumAxes = 8;     // SDL_JoystickNumAxes(joystick[i]);
+	joysticks[i].NumButtons = 20; // SDL_JoystickNumButtons(joystick[i]);
 
     strcpy(joysticks[i].Name, SDL_JoystickName(i));
 
-- 
2.33.0.windows.2

